#!/usr/bin/env ruby
#
# Changes the types of variables according to a TypeForge specification. This is
# a purely text-based replacement and is very limited in what it can handle. All
# declarations must be one-variable-per-line and of the form "<type> <var>;".
#
# This script is designed to be used as a wrapper for the compiler. All
# parameters except the first (the specification filename) are passed through.
#

require 'json'

if ARGV.size < 2 then
    puts "Usage: craft_change_types <spec-file> <c-flags> <source-file>"
end

# open and parse specification file
begin
    cfg = JSON.parse(IO.read(ARGV[0]))
rescue => e
    puts "Invalid configuration file!"
    puts e
    exit
end

# look for type replacements in specification file
replacements = Hash.new
cfg["actions"].each do |a|
    if a["action"] == "replace_varbasetype" then
        replacements[a["handle"]] = a["to_type"]
    end
end

# scan for definitions and replace types where requested
ARGV.each do |arg|
    if arg =~ /\.(c|C|cpp|h|H|hpp)$/ then
        source = IO.readlines(arg)
        lineno=0
        while lineno < source.size do
            line = source[lineno]
            if line =~ /double\s*(\*)?\s*(\w+)/ then
                handle = "#{$2}:#{arg}:#{lineno}"
                if replacements.has_key?(handle) then
                    source[lineno] = line.sub(/double/, replacements[handle])
                end
            end
            lineno += 1
        end
        # re-write source file
        out = File.open(arg, "w")
        source.each do |line|
            out.puts line
        end
        out.close
    end
end

# pass arguments through to compiler
exec("g++", *ARGV[1..-1])

