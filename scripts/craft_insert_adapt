#!/usr/bin/env ruby
#
# Inserts ADaPT instrumentation using TypeForge and additional modifications.
#
# This script is designed to be used as a wrapper for the compiler. All
# parameters are passed through.
#

if ARGV.size < 1 then
    puts "Usage: craft_insert_adapt <c-flags> <source-file>"
end

if not ENV.has_key?("ADAPT_PATH") then
    puts "ADAPT_PATH environment variable must be defined"
end
$AD_PATH=ENV["ADAPT_PATH"]

# save TypeForge configuration file
File.open("adapt.tf", "w") do |f|
    f.puts("transform;*;float;ad_intermediate_instrumentation")
    f.puts("replace_type;*:ret,args,body;double=>AD_real")
    f.puts("replace_type;\$global;double=>AD_real")
end

# look for source code parameters
aidx = 0
while aidx < ARGV.size do
    arg = ARGV[aidx]
    if arg =~ /\.cpp$/ then

        # perform TypeForge transformations
        system("typeforge --spec-file=adapt.tf #{arg}")
        new_file = "rose_#{arg}"
        source = IO.readlines(new_file)

        # insert header file include
        source.insert(0, "#include <codiwrap.h>")

        lineno=0
        while lineno < source.size do
            line = source[lineno]

            # replace any AD_real=>double casts
            if line =~ /\(\(double \)(\w+)\)/ then
                source[lineno] = line.gsub(/\(\(double \)(\w+)\)/,"(AD_value(\\1))")
            end

            # insert AD implementation in file with main()
            if line =~ /main\s*\(/ then
                source.insert(0, "#define AD_IMPLEMENTATION")
                lineno += 1
            end

            # replace user-provided pragmas
            if line =~ /#\s*pragma\s+adapt\s+begin/ then
                source[lineno] = "AD_begin();"
            elsif line =~ /#\s*pragma\s+adapt\s+output\s+(\w+)\s+(.*)$/ then
                source[lineno] = "AD_DEPENDENT(#{$1}, \"#{$1}\", #{$2});"
            elsif line =~ /#\s*pragma\s+adapt\s+end/ then
                source[lineno] = "AD_end(); AD_report(false, GREEDY);"
            end

            lineno += 1
        end

        # write new source file
        outfile = File.open(arg, "w") do |f|
            source.each { |line| f.puts line }
        end
    end
    aidx += 1
end

# add compiler flags
ARGV << "-I#{$AD_PATH}"
ARGV << "-std=c++11"

# pass arguments through to compiler
exec("g++", *ARGV)

